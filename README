How to use:

Take an object with non public methods/fields, create new Introspectable(<this object), and use this new object as is!
For example:

val obj: AnyRef = new java.util.HashMap[String, String]
val o = new Introspectable(obj)
o.put("hello", "tata")

Or a more useful one:
val devicePolicyManager = context.getSystemService(Context.DEVICE_POLICY_MANAGER).asInstanceOf[DevicePolicyManager]
val mng = new Introspectable(devicePolicyManager)
mng.setActiveAdmin(new ComponentName("android.deviceadmin.cts", "android.deviceadmin.cts.CtsDeviceAdminReceiver2"), true)

Or, with a constructor:
val u = new Introspectable(Introspectable.create("com.android.internal.widget.LockPatternUtils", this))
u.clearLock(false)

If you want to call a static function, create an Introspectable and pass a Class to it like this:
val u = new Introspectable(Class.forName("me.phh.introspect.TestClass"))
val res = u.staticFnc1()

If you need to give a function a null pointer, specify instead the class of the null:
fnc(classOf[String])
